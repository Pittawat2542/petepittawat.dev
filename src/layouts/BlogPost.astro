---
import type { CollectionEntry } from 'astro:content';
import FormattedDate from '../components/FormattedDate.astro';
import BaseLayout from './BaseLayout.astro';
import ReadingProgressBar from '../components/ReadingProgressBar.astro';
import siteLogo from '../assets/images/logo.png';
import { Image } from 'astro:assets';

type Props = CollectionEntry<'blog'>['data'] & { slug?: string };

const { title, excerpt, pubDate, coverImage, tags, slug } = Astro.props as Props;
const authorUrl = Astro.site ? new URL('/about', Astro.site).href : '/about';
const twitterHandle = import.meta.env.PUBLIC_TWITTER_HANDLE as string | undefined;
const authorSameAs: string[] = [];
if (twitterHandle) {
  const handle = twitterHandle.startsWith('@') ? twitterHandle.slice(1) : twitterHandle;
  authorSameAs.push(`https://twitter.com/${handle}`);
}
// Always include the site About page as a profile URL
authorSameAs.push(authorUrl);

const publisherUrl = Astro.site ? new URL('/', Astro.site).href : '/';
const logoUrl = Astro.site ? new URL(siteLogo.src, Astro.site).href : siteLogo.src;
const imageUrl = Astro.site
  ? new URL(coverImage?.src ?? (slug ? `/og/blog/${slug}.png` : '/home-og-image.jpeg'), Astro.site).href
  : (coverImage?.src ?? (slug ? `/og/blog/${slug}.png` : '/home-og-image.jpeg'));
const pageUrl = Astro.site ? new URL(`/blog/${slug}/`, Astro.site).href : `/blog/${slug}/`;
---

<BaseLayout
  title={`${title} - PETEPITTAWAT.DEV`}
  description={excerpt}
  image={coverImage?.src ?? (slug ? `/og/blog/${slug}.png` : undefined)}
  type="article"
  publishedTime={pubDate.toISOString?.() ?? String(pubDate)}
  tags={tags}
>
	<ReadingProgressBar />
	<Fragment slot="head">
		<script type="application/ld+json" is:inline>
{JSON.stringify({
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  headline: title,
  description: excerpt,
  datePublished: pubDate.toISOString?.() ?? String(pubDate),
  author: {
    "@type": "Person",
    name: "Pittawat Taveekitworachai",
    url: authorUrl,
    sameAs: authorSameAs,
  },
  publisher: {
    "@type": "Organization",
    name: "PETEPITTAWAT.DEV",
    url: publisherUrl,
    logo: {
      "@type": "ImageObject",
      url: logoUrl,
    },
  },
  image: imageUrl,
  url: pageUrl,
})}
		</script>
	</Fragment>
	<article class='mx-auto prose xl:prose-lg prose-invert prose-img:rounded-xl prose-img:shadow-xl prose-a:text-[color:var(--accent)]'>
		<div class='mb-6'>
			{coverImage && (
				<Image
					class='rounded-xl'
					src={coverImage}
					alt=""
					loading="eager"
					fetchpriority="high"
					sizes="(min-width: 1280px) 960px, (min-width: 768px) 768px, 100vw"
					decoding="async"
				/>
			)}
		</div>
		<div>
			<h1 class="xl:text-4xl">{title}</h1>
			<p class='italic text-base'>
				Published on <FormattedDate date={pubDate} />
			</p>
			<p class="text-base italic">Authored by <span class="font-bold">Pete</span>. Pittawat Taveekitworachai.</p>
			<hr />
  <slot />

  {tags?.length ? (
    <div class="mt-8">
      <h2 class="text-lg font-semibold mb-3">Tags</h2>
      <ul class="flex flex-wrap gap-2">
        {tags.map((t) => (
          <li>
            <a href={`/blog?tag=${encodeURIComponent(t)}`} class="inline-flex items-center gap-1.5 rounded-full px-3 py-1.5 text-sm font-medium text-[color:var(--accent)] bg-[color:var(--accent)]/[.10] ring-1 ring-[color:var(--accent)]/40 hover:bg-[color:var(--accent)]/[.16] focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring">#{t}</a>
          </li>
        ))}
      </ul>
    </div>
  ) : null}


		</div>
	</article>
  <slot name="after" />
</BaseLayout>

<script is:inline>
  // Add copy buttons to code blocks within the article
  const setupCopyButtons = () => {
    const article = document.querySelector('article');
    if (!article) return;
    const blocks = article.querySelectorAll('pre > code');
    blocks.forEach((code) => {
      const pre = code.parentElement;
      if (!pre || pre.classList.contains('has-copy')) return;
      pre.classList.add('has-copy');
      const btn = document.createElement('button');
      btn.type = 'button';
      btn.className = 'copy-btn';
      btn.ariaLabel = 'Copy code to clipboard';
      btn.textContent = 'Copy';
      btn.addEventListener('click', async () => {
        try {
          await navigator.clipboard.writeText(code.textContent || '');
          const original = btn.textContent;
          btn.textContent = 'Copied!';
          btn.classList.add('copied');
          setTimeout(() => { btn.textContent = original; btn.classList.remove('copied'); }, 1200);
        } catch {}
      });
      pre.appendChild(btn);
    });
  };
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', setupCopyButtons);
  } else {
    setupCopyButtons();
  }
</script>

<style is:inline>
  .prose pre { position: relative; }
  .prose pre .copy-btn {
    position: absolute;
    top: 0.4rem;
    right: 0.5rem;
    font-size: 0.75rem;
    line-height: 1;
    padding: 0.35rem 0.5rem;
    border-radius: 0.375rem;
    background: color-mix(in oklab, var(--white) 8%, transparent);
    border: 1px solid color-mix(in oklab, var(--white) 18%, transparent);
    color: color-mix(in oklab, var(--white) 92%, transparent);
    cursor: pointer;
    transition: all .15s ease-in-out;
  }
  .prose pre .copy-btn:hover {
    background: color-mix(in oklab, var(--accent) 16%, transparent);
    border-color: color-mix(in oklab, var(--accent) 40%, transparent);
    color: black;
  }
  .prose pre .copy-btn.copied {
    background: color-mix(in oklab, var(--accent) 26%, transparent);
    border-color: color-mix(in oklab, var(--accent) 46%, transparent);
    color: black;
  }
</style>
