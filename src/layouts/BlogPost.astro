---
import type { CollectionEntry } from 'astro:content';
import FormattedDate from '../components/content/FormattedDate';
import BaseLayout from './BaseLayout.astro';
import ReadingProgressBar from '../components/layout/core/ReadingProgressBar';
import { Image } from 'astro:assets';
// Simplified layout for focused reading
import { Calendar, User2, Clock3, Tag as TagIcon } from 'lucide-astro';
import Toc from '../components/layout/blog/Toc.astro';

type Props = CollectionEntry<'blog'>['data'] & { slug?: string; readingTimeMin?: number };

const { title, excerpt, pubDate, coverImage, tags, slug, readingTimeMin, seriesSlug, seriesTitle, seriesOrder } = Astro.props as Props;
const maxTagsToShow = 6;
const visibleTags = (tags ?? []).slice(0, maxTagsToShow);
const hiddenTagCount = Math.max(0, (tags?.length ?? 0) - maxTagsToShow);
const authorUrl = Astro.site ? new URL('/about', Astro.site).href : '/about';
const canonicalUrl = slug ? (Astro.site ? new URL(`/blog/${slug}/`, Astro.site).href : `/blog/${slug}/`) : (Astro.url?.pathname || '/');
const imageUrl = (() => {
  const fallback = slug ? `/og/blog/${slug}.png` : '/home-og-image.jpeg';
  const src = coverImage?.src ?? fallback;
  return Astro.site ? new URL(src, Astro.site).href : src;
})();
// Touch variables to satisfy TS analyzer in Astro frontmatter
void canonicalUrl;
void imageUrl;
const twitterHandle = (import.meta.env as any)['PUBLIC_TWITTER_HANDLE'] as string | undefined;
const authorSameAs: string[] = [];
if (twitterHandle) {
  const handle = twitterHandle.startsWith('@') ? twitterHandle.slice(1) : twitterHandle;
  authorSameAs.push(`https://twitter.com/${handle}`);
}
// Always include the site About page as a profile URL
authorSameAs.push(authorUrl);

// Note: compute JSON-LD URLs inline to avoid unused-variable hints
---


<BaseLayout
  title={`${title} - PETEPITTAWAT.DEV`}
  description={excerpt}
  image={coverImage?.src ?? (slug ? `/og/blog/${slug}.png` : undefined)}
  type="article"
  publishedTime={pubDate.toISOString?.() ?? String(pubDate)}
  tags={tags}
>
	<ReadingProgressBar />
	<Fragment slot="head">
    {
      (() => {
        const schema = {
          "@context": "https://schema.org",
          "@type": "BlogPosting",
          headline: title,
          description: excerpt,
          datePublished: pubDate.toISOString?.() ?? String(pubDate),
          mainEntityOfPage: canonicalUrl,
          author: {
            "@type": "Person",
            name: "Pittawat Taveekitworachai",
            url: authorUrl,
            sameAs: authorSameAs,
          },
          publisher: {
            "@type": "Organization",
            name: "PETEPITTAWAT.DEV",
            url: (Astro.site ? new URL('/', Astro.site).href : '/'),
            logo: {
              "@type": "ImageObject",
              url: (Astro.site ? new URL('/favicon.svg', Astro.site).href : '/favicon.svg'),
            },
          },
          image: imageUrl,
          url: canonicalUrl,
          // Add series information if available
          ...(seriesSlug && seriesTitle ? {
            "isPartOf": {
              "@type": "BlogSeries",
              "name": seriesTitle,
              "url": (Astro.site ? new URL(`/series/`, Astro.site).href : '/series/'),
            },
            "position": seriesOrder || undefined,
          } : {}),
        };
        return (
          <script type="application/ld+json" is:inline set:html={JSON.stringify(schema)} />
        );
      })()
    }
	</Fragment>

  <div class="mx-auto px-0 md:px-2">
    <div class="max-w-prose mx-auto">
      <a href="/blog" class="text-sm text-[color:var(--accent)]/80 hover:text-[color:var(--accent)]">← All posts</a>
      <h1 class="mt-2 text-3xl md:text-4xl lg:text-5xl font-bold tracking-tight">{title}</h1>
      <div class="space-y-4 text-xs md:text-sm text-[color:var(--white)]/70 my-4">
        <div class="flex flex-wrap items-center gap-x-3 gap-y-1">
          <span class="inline-flex items-center gap-1.5">
            <span class="sr-only">Published</span>
            <Calendar class="h-4 w-4 opacity-80" aria-hidden="true" />
            <span class="font-medium text-[color:var(--white)]/85"><FormattedDate date={pubDate} /></span>
          </span>
          <span aria-hidden class="opacity-25">·</span>
          <span class="inline-flex items-center gap-1.5">
            <span class="sr-only">Author</span>
            <User2 class="h-4 w-4 opacity-80" aria-hidden="true" />
            <span class="text-[color:var(--white)]/80">Pete</span>
          </span>
          {typeof readingTimeMin === 'number' ? (
            <>
              <span aria-hidden class="opacity-25">·</span>
              <span class="inline-flex items-center gap-1.5">
                <span class="sr-only">Reading time</span>
                <Clock3 class="h-4 w-4 opacity-80" aria-hidden="true" />
                <span class="text-[color:var(--white)]/80">{readingTimeMin} min read</span>
              </span>
            </>
          ) : null}
        </div>

        {visibleTags.length ? (
          <div class="flex items-start gap-2 flex-wrap">
            <span class="inline-flex items-center gap-1.5 text-[color:var(--white)]/70">
              <span class="sr-only">Tags</span>
              <TagIcon class="h-4 w-4 opacity-80" aria-hidden="true" />
            </span>
            <ul class="flex flex-wrap items-center gap-1.5 m-0 p-0 list-none">
              {visibleTags.map((t) => (
                <li>
                  <a
                    href={`/tags/${t.toLowerCase().trim().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '')}`}
                    class="inline-flex items-center rounded-full px-2 py-0.5 text-[11px] md:text-xs font-medium text-[color:var(--accent-blog)] bg-[color:var(--accent-blog)]/[.10] ring-1 ring-[color:var(--accent-blog)]/30 hover:bg-[color:var(--accent-blog)]/[.20] hover:ring-[color:var(--accent-blog)]/60 transition-[transform,background-color,ring-color] duration-150 ease-out will-change-transform hover:-translate-y-0.5 active:translate-y-0 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[color:var(--accent-blog)]/70"
                    >#{t}
                  </a>
                </li>
              ))}
              {hiddenTagCount > 0 ? (
                <li>
                  <span class="inline-flex items-center rounded-full px-2 py-0.5 text-[11px] md:text-xs font-medium text-[color:var(--white)]/70 ring-1 ring-[color:var(--white)]/20">+{hiddenTagCount} more</span>
                </li>
              ) : null}
            </ul>
          </div>
        ) : null}
      </div>
    </div>

    {coverImage && (
      <div class="max-w-prose mx-auto mt-4 md:mt-6 lg:mt-8">
        <Image
          class='rounded-xl'
          src={coverImage}
          alt=""
          loading="eager"
          fetchpriority="high"
          sizes="(min-width: 1024px) 768px, (min-width: 768px) 640px, 100vw"
          decoding="async"
        />
      </div>
    )}

    <Toc selector="#post-article" levels={[2,3]} collapsed={true} />
    <article id="post-article" class="prose prose-invert mx-auto max-w-prose mt-6 prose-a:text-[color:var(--accent)] hover:prose-a:underline prose-a:underline-offset-2 prose-img:rounded-lg prose-pre:text-sm prose-code:text-[0.95em] prose-code:before:content-[''] prose-code:after:content-[''] prose-h1:text-3xl prose-h2:text-2xl lg:prose-h1:text-4xl lg:prose-h2:text-3xl prose-headings:mt-8 prose-headings:mb-3 prose-headings:scroll-mt-28 md:prose-headings:scroll-mt-32 prose-p:leading-7">
      <slot />

      
    </article>
  </div>

  <div class="max-w-prose mx-auto">
    <slot name="after" />
  </div>
</BaseLayout>

<script>
  import '../scripts/blog-post.ts';
</script>

<style>
  @import '../styles/blog-post.css';
</style>
