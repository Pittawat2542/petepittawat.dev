---
import AnimatedHeader from '@/components/common/AnimatedHeader';
import BaseHead from '@/components/layout/core/BaseHead.astro';
import Footer from '@/components/layout/core/Footer.astro';
import ScrollTop from '@/components/layout/blog/ScrollTop';
import SearchModal from '@/components/layout/SearchModal';

const { title, description, image, type, publishedTime, tags, page } = Astro.props as {
  title: string;
  description: string;
  image?: string;
  type?: 'website' | 'article';
  publishedTime?: string;
  tags?: string[];
  page?: string;
};
const ogImagePath = image ?? '/home-og-image.jpeg';
const ogImage = Astro.site ? new URL(ogImagePath, Astro.site).href : ogImagePath;
const pageKey = page?.toLowerCase();
const pageAccent = pageKey ? `var(--accent-${pageKey}, var(--accent, #6ac1ff))` : undefined;
const bodyStyle = pageAccent
  ? `--page-accent:${pageAccent};--card-accent:${pageAccent};`
  : undefined;
const bodyClasses = pageKey ? ['page-theme', `page-theme--${pageKey}`] : [];
---

<!doctype html>
<html lang="en" style="background:#111827;color:#F9FAFB;color-scheme: dark;">
  <head>
    <BaseHead
      title={title}
      description={description}
      image={ogImage}
      type={type || undefined}
      publishedTime={publishedTime || undefined}
      tags={tags || undefined}
    />
    <slot name="head" />
    <link rel="sitemap" href="/sitemap-index.xml" />
    {
      import.meta.env.DEV && (
        <>
          <script is:inline>
            {`
            try {
              if (!window.__vite_plugin_react_preamble_installed__) {
                window.__vite_plugin_react_preamble_installed__ = true;
                window.$RefreshReg$ = () => {};
                window.$RefreshSig$ = () => (type) => type;
              }
            } catch {}
            `}
          </script>
          <script type="module" is:inline>
            {`import RefreshRuntime from '/@react-refresh';
              try { RefreshRuntime.injectIntoGlobalHook(window); } catch {}`}
          </script>
        </>
      )
    }
  </head>

  <body data-page={pageKey || undefined} class:list={bodyClasses} style={bodyStyle}>
    <AnimatedHeader client:load />
    <main
      id="main-content"
      class="page-shell mx-auto mb-12 max-w-screen-lg px-6 pt-28 md:max-w-screen-xl md:px-10"
      style="view-transition-name: page;"
    >
      <slot />
    </main>
    <Footer />
    <ScrollTop />
    <SearchModal hideTriggers client:load />
    <script>
      // Performance optimized initialization
      (function () {
        // Reveal-on-scroll for elements with `.reveal` class - optimized with RAF
        const io = new IntersectionObserver(
          entries => {
            for (const e of entries) {
              if (e.isIntersecting) {
                requestAnimationFrame(() => {
                  e.target.classList.add('reveal-visible');
                });
                io.unobserve(e.target); // Stop observing once revealed
              }
            }
          },
          { rootMargin: '0px 0px -5% 0px', threshold: 0.05 }
        );

        // Observe existing and future .reveal elements
        const initReveal = () => {
          const elements = document.querySelectorAll('.reveal');
          elements.forEach(el => io.observe(el));

          // Observe future additions
          const mo = new MutationObserver(mutations => {
            for (const m of mutations) {
              m.addedNodes.forEach(node => {
                if (!(node instanceof Element)) return;
                if (node.classList?.contains('reveal')) io.observe(node);
                node.querySelectorAll?.('.reveal').forEach(el => io.observe(el));
              });
            }
          });
          try {
            mo.observe(document.body, { childList: true, subtree: true });
          } catch {}
        };

        // Security: ensure rel for target=_blank links - optimized
        const fixExternalRel = () => {
          try {
            const links = document.querySelectorAll('a[target="_blank"]');

            links.forEach(a => {
              const current = (a.getAttribute('rel') || '').split(/\s+/).filter(Boolean);
              if (!current.includes('noopener')) current.push('noopener');
              if (!current.includes('noreferrer')) current.push('noreferrer');
              a.setAttribute('rel', current.join(' '));
            });
          } catch (e) {
            console.warn('Failed to fix external link rels:', e);
          }
        };

        // Optimize initialization timing
        if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', () => {
            requestAnimationFrame(() => {
              initReveal();
              fixExternalRel();
            });
          });
        } else {
          requestAnimationFrame(() => {
            initReveal();
            fixExternalRel();
          });
        }
      })();
    </script>
  </body>
</html>
