---
import type { HTMLAttributes } from 'astro/types';

interface Props extends HTMLAttributes<'div'> {
  class?: string;
  variant?: 'default' | 'elevated' | 'premium';
  rounded?: 'sm' | 'md' | 'lg' | 'xl' | '2xl' | 'full';
  padding?: 'none' | 'sm' | 'md' | 'lg' | 'xl';
  as?: 'div' | 'section' | 'article' | 'aside' | 'nav';
}

const { 
  class: className, 
  variant = 'default', 
  rounded = 'lg',
  padding = 'md',
  as = 'div',
  ...rest 
} = Astro.props as Props;

const getClasses = (
  variant: 'default' | 'elevated' | 'premium', 
  rounded: 'sm' | 'md' | 'lg' | 'xl' | '2xl' | 'full', 
  padding: 'none' | 'sm' | 'md' | 'lg' | 'xl'
) => {
  const baseClasses = 'transition-[transform,box-shadow,border-color,background-color] duration-200 ease-out will-change-transform';
  
  const variantClasses = {
    default: 'glass-surface',
    elevated: 'glass-surface-elevated',
    premium: 'glass-surface-premium'
  } as const;
  
  const roundedClasses = {
    sm: 'rounded-sm',
    md: 'rounded-md',
    lg: 'rounded-lg',
    xl: 'rounded-xl',
    '2xl': 'rounded-2xl',
    full: 'rounded-full'
  } as const;
  
  const paddingClasses = {
    none: '',
    sm: 'p-3',
    md: 'p-4 md:p-6',
    lg: 'p-6 md:p-8',
    xl: 'p-8 md:p-12'
  } as const;
  
  return `${baseClasses} ${variantClasses[variant]} ${roundedClasses[rounded]} ${paddingClasses[padding]}`;
};

const Element = as;
const commonProps = {
  class: `${getClasses(variant, rounded, padding)} ${className ?? ''}`,
  ...rest
};
---

<Element {...commonProps}>
  <slot />
</Element>
