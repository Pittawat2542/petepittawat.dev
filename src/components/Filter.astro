---
interface FilterProps {
  q: string;
  setQ: (q: string) => void;
  filters: Record<string, string>;
  setFilters: (filters: Record<string, string>) => void;
  filterOptions: Record<string, any[]>;
}

const { q, setQ, filters, setFilters, filterOptions } = Astro.props;
---

<div class="flex flex-col md:flex-row gap-3 md:items-center">
  <input
    type="search"
    value={q}
    onInput={(e) => setQ(e.target.value)}
    placeholder="Search..."
    class="w-full md:max-w-md rounded-md border border-[color:var(--white)]/15 bg-transparent px-3 py-2 text-sm"
  />
  <div class="flex gap-2">
    {Object.entries(filterOptions).map(([key, options]) => (
      <select 
        value={filters[key] || 'all'} 
        onChange={(e) => setFilters({...filters, [key]: e.target.value})}
        class="rounded-md border border-[color:var(--white)]/15 bg-transparent px-2 py-2 text-sm"
      >
        <option value="all">All {key}s</option>
        {options.map((option) => (
          <option value={option}>{option}</option>
        ))}
      </select>
    ))}
  </div>
</div>