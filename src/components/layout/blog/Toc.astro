---
interface Props {
  title?: string;
  selector?: string; // CSS selector for the article root
  levels?: Array<2 | 3 | 4 | 5 | 6>;
  collapsed?: boolean;
}
const {
  title = 'Table of contents',
  selector = 'article',
  levels = [2, 3],
  collapsed = true,
} = Astro.props as Props;
import { List, ChevronDown } from 'lucide-astro';
---

<nav
  class="toc-root"
  aria-label="Table of contents"
  data-selector={selector}
  data-levels={JSON.stringify(levels)}
  data-open={!collapsed}
>
  <details class="toc-card group">
    <summary class="toc-summary">
      <span class="toc-summary__icon" aria-hidden="true">
        <List class="h-[14px] w-[14px]" aria-hidden="true" />
      </span>
      <span class="toc-summary__content">
        <span class="toc-summary__label">{title}</span>
        <span id="toc-count" class="toc-summary__count"></span>
      </span>
      <span class="toc-summary__action">
        <span class="toc-summary__hint">Expand</span>
        <ChevronDown class="toc-summary__chevron" aria-hidden="true" />
      </span>
    </summary>
    <div class="toc-panel">
      <ul id="toc-list" class="toc-list"></ul>
    </div>
  </details>
</nav>

<script is:inline>
  const navEl =
    (document.currentScript && document.currentScript.previousElementSibling) ||
    document.querySelector('nav[aria-label="Table of contents"]');
  const ds = (navEl && navEl.dataset) || {};
  const rootSelector = ds.selector || 'article';
  let levels = [2, 3];
  try {
    levels = JSON.parse(ds.levels || '[2,3]');
  } catch {}
  const openByDefault = ds.open === 'true';

  const slugify = s =>
    s
      .toLowerCase()
      .trim()
      .replace(/[^a-z0-9]+/g, '-')
      .replace(/(^-|-$)/g, '');

  const initToc = () => {
    const article = document.querySelector(rootSelector) || document.querySelector('article');
    const details = navEl?.querySelector('details');
    if (!article || !details || !navEl) return;
    if (openByDefault) details.setAttribute('open', '');
    else details.removeAttribute('open');

    const sel = levels.map(l => `h${l}`).join(',');
    const headings = Array.from(article.querySelectorAll(sel));
    const list = navEl.querySelector('#toc-list');
    const count = navEl.querySelector('#toc-count');
    if (!list) return;
    list.innerHTML = '';
    if (count) count.textContent = headings.length ? `${headings.length} sections` : '';

    // Hide ToC entirely if no headings
    if (!headings.length) {
      if (navEl && navEl instanceof HTMLElement) {
        navEl.style.display = 'none';
      }
      return;
    }

    headings.forEach(h => {
      const text = (h.textContent || '').trim();
      if (!text) return;
      if (!h.id) h.id = slugify(text);
      const li = document.createElement('li');
      const isH3 = h.tagName === 'H3';
      li.className = `toc-row${isH3 ? ' toc-row--sub' : ''}`;
      const a = document.createElement('a');
      a.href = `#${h.id}`;
      a.textContent = text;
      a.className = `toc-link${isH3 ? ' toc-link--sub' : ' toc-link--main'}`;

      // Icon
      const icon = document.createElement('span');
      icon.className = 'toc-icon';
      if (isH3) {
        icon.innerHTML =
          '<svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" aria-hidden="true"><polyline points="9 18 15 12 9 6"/></svg>';
      } else {
        icon.innerHTML =
          '<svg width="12" height="12" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true"><circle cx="12" cy="12" r="5"/></svg>';
      }
      a.prepend(icon);
      li.appendChild(a);
      list.appendChild(li);
    });

    const updateHint = () => {
      const hint = navEl.querySelector('.toc-summary__hint');
      if (!hint) return;
      hint.textContent = details.open ? 'Hide' : 'Expand';
    };
    updateHint();
    details.addEventListener('toggle', updateHint);
  };

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initToc);
  } else {
    initToc();
  }
</script>

<style is:inline>
  .toc-root .toc-icon svg {
    display: block;
  }
  @media (prefers-reduced-motion: reduce) {
    .toc-root .toc-summary__chevron {
      transition: none !important;
    }
  }
</style>
