---
export interface Props {
  variant: 'desktop' | 'mobile' | 'drawer';
  class?: string;
}

const { variant, class: className } = Astro.props;

const getButtonProps = (variant: string) => {
  switch (variant) {
    case 'desktop':
      return {
        id: 'open-search-desktop',
        class: `search-trigger search-trigger--primary hidden md:inline-flex items-center gap-2 rounded-full px-3.5 py-2 text-sm text-[color:var(--white)]/80 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[color:var(--white)]/28 ${className || ''}`,
        children: [
          { type: 'icon', content: 'search' },
          { type: 'text', content: 'Search' },
          { type: 'shortcut', content: 'K' },
        ],
      };
    case 'mobile':
      return {
        id: 'open-search-mobile',
        class: `search-trigger search-trigger--icon md:hidden inline-flex items-center justify-center rounded-full p-2.5 text-[color:var(--white)]/85 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[color:var(--white)]/28 ${className || ''}`,
        children: [{ type: 'icon', content: 'search-large' }],
      };
    case 'drawer':
      return {
        id: 'open-search-drawer',
        class: `search-trigger search-trigger--drawer glass-button rounded-full w-full flex items-center gap-3 px-4 py-3 text-base font-medium text-[color:var(--white)]/90 bg-[color:var(--white)]/[0.06] border border-[color:var(--white)]/15 hover:bg-[color:var(--white)]/[0.12] hover:border-[color:var(--white)]/25 hover:text-[color:var(--white)] focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[color:var(--white)]/30 ${className || ''}`,
        children: [
          { type: 'icon', content: 'search-drawer' },
          { type: 'text', content: 'Search' },
        ],
      };
    default:
      return {
        id: 'open-search-desktop',
        class: className || '',
        children: [],
      };
  }
};

const buttonProps = getButtonProps(variant);
---

<button
  id={buttonProps.id}
  class={buttonProps.class}
  aria-label="Open search"
  title={variant === 'desktop' ? 'Search (âŒ˜/Ctrl + K)' : 'Search'}
  type="button"
>
  {
    buttonProps.children.map(child => {
      if (child.type === 'icon') {
        if (child.content === 'search') {
          return (
            <svg
              width="16"
              height="16"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              aria-hidden="true"
            >
              <circle cx="11" cy="11" r="8" />
              <path d="m21 21-4.3-4.3" />
            </svg>
          );
        } else if (child.content === 'search-large') {
          return (
            <svg
              width="18"
              height="18"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              aria-hidden="true"
            >
              <circle cx="11" cy="11" r="8" />
              <path d="m21 21-4.3-4.3" />
            </svg>
          );
        } else if (child.content === 'search-drawer') {
          return (
            <svg
              width="20"
              height="20"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              aria-hidden="true"
            >
              <circle cx="11" cy="11" r="8" />
              <path d="m21 21-4.3-4.3" />
            </svg>
          );
        }
      } else if (child.type === 'text') {
        return <span class="opacity-90">{child.content}</span>;
      } else if (child.type === 'shortcut') {
        return (
          <span class="ml-2 hidden items-center gap-1 rounded-md border border-white/10 px-1.5 py-0.5 text-xs text-white/70 lg:inline-flex">
            <svg
              width="12"
              height="12"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
              aria-hidden="true"
            >
              <path d="M18 8a6 6 0 0 1-6 6" />
              <path d="M5 19v-7a2 2 0 0 1 2-2h7" />
            </svg>
            {child.content}
          </span>
        );
      }
    })
  }
</button>

<style>
  .search-trigger {
    position: relative;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    border-radius: inherit;
    overflow: hidden;
    isolation: isolate;
    border: 1px solid transparent;
    transition:
      transform 320ms cubic-bezier(0.22, 0.61, 0.36, 1),
      border-color 280ms ease,
      background-color 280ms ease,
      box-shadow 280ms ease,
      color 200ms ease;
  }

  .search-trigger:not(.search-trigger--drawer) {
    background: rgba(15, 24, 38, 0.48);
    border-color: rgba(255, 255, 255, 0.16);
    color: rgba(255, 255, 255, 0.88);
    box-shadow: 0 16px 28px -24px rgba(4, 12, 24, 0.9);
    backdrop-filter: blur(16px);
    -webkit-backdrop-filter: blur(16px);
  }

  .search-trigger::before {
    content: none;
  }

  .search-trigger:not(.search-trigger--drawer)::before {
    content: '';
    position: absolute;
    inset: 0;
    border-radius: inherit;
    background:
      radial-gradient(circle at 20% 20%, rgba(255, 255, 255, 0.25), transparent 55%),
      radial-gradient(circle at 80% 80%, rgba(106, 193, 255, 0.35), transparent 70%);
    opacity: 0;
    transform: scale(0.9);
    transition:
      opacity 280ms ease,
      transform 320ms cubic-bezier(0.22, 0.61, 0.36, 1);
    z-index: -1;
  }

  .search-trigger:not(.search-trigger--drawer):not(.search-trigger--primary)::after {
    content: '';
    position: absolute;
    inset: -40%;
    border-radius: inherit;
    background: radial-gradient(circle at 30% 30%, rgba(255, 255, 255, 0.18), transparent 60%);
    opacity: 0;
    transition: opacity 340ms ease;
    z-index: -2;
  }

  .search-trigger svg,
  .search-trigger span {
    position: relative;
    z-index: 2;
  }

  .search-trigger svg {
    transition:
      transform 260ms cubic-bezier(0.22, 0.61, 0.36, 1),
      filter 260ms ease;
  }

  .search-trigger span {
    transition:
      transform 260ms cubic-bezier(0.22, 0.61, 0.36, 1),
      opacity 200ms ease;
  }

  .search-trigger:hover,
  .search-trigger:focus-visible {
    transform: translateY(-1px) scale(1.01);
  }

  .search-trigger:not(.search-trigger--drawer):hover,
  .search-trigger:not(.search-trigger--drawer):focus-visible {
    border-color: rgba(255, 255, 255, 0.32);
    background: rgba(22, 34, 52, 0.58);
    box-shadow: 0 22px 46px -28px rgba(6, 16, 34, 0.95);
    color: rgba(255, 255, 255, 0.96);
  }

  .search-trigger:not(.search-trigger--drawer):hover::before,
  .search-trigger:not(.search-trigger--drawer):focus-visible::before {
    opacity: 1;
    transform: scale(1.05);
  }

  .search-trigger:not(.search-trigger--drawer):not(.search-trigger--primary):hover::after,
  .search-trigger:not(.search-trigger--drawer):not(.search-trigger--primary):focus-visible::after {
    opacity: 0.8;
  }

  .search-trigger:hover svg,
  .search-trigger:focus-visible svg {
    transform: translate(2px, -2px) scale(1.05);
    filter: drop-shadow(0 6px 12px rgba(106, 193, 255, 0.35));
  }

  .search-trigger:hover span,
  .search-trigger:focus-visible span {
    transform: translateX(1px);
    opacity: 1;
  }

  .search-trigger--icon {
    width: 2.65rem;
    height: 2.65rem;
    border-radius: 999px;
    padding: 0;
    border-color: rgba(255, 255, 255, 0.18);
  }

  .search-trigger--icon svg {
    width: 1.15rem;
    height: 1.15rem;
  }

  .search-trigger--primary::after {
    content: '';
    position: absolute;
    inset: -45% -55%;
    border-radius: inherit;
    background: linear-gradient(
      120deg,
      transparent 20%,
      rgba(255, 255, 255, 0.75) 45%,
      rgba(106, 193, 255, 0.4) 55%,
      transparent 80%
    );
    transform: translateX(-120%) rotate(-6deg);
    opacity: 0;
    mix-blend-mode: screen;
    transition: opacity 240ms ease;
    z-index: -1;
  }

  .search-trigger--primary:hover::after,
  .search-trigger--primary:focus-visible::after {
    opacity: 0.85;
    animation: search-trigger-sheen 900ms cubic-bezier(0.34, 0.7, 0.28, 1) forwards;
  }

  .search-trigger--drawer {
    transform-origin: center;
  }

  .search-trigger--drawer:hover,
  .search-trigger--drawer:focus-visible {
    transform: translateY(-1px) scale(1.01);
  }

  .search-trigger--drawer svg {
    transition:
      transform 260ms cubic-bezier(0.22, 0.61, 0.36, 1),
      filter 260ms ease;
  }

  .search-trigger--drawer:hover svg,
  .search-trigger--drawer:focus-visible svg {
    transform: translate(2px, -2px) scale(1.04);
    filter: drop-shadow(0 6px 10px rgba(106, 193, 255, 0.35));
  }

  @media (prefers-reduced-motion: reduce) {
    .search-trigger,
    .search-trigger svg,
    .search-trigger span {
      transition-duration: 0.001ms !important;
      transition-delay: 0ms !important;
    }
    .search-trigger,
    .search-trigger--drawer {
      transform: none !important;
    }
    .search-trigger svg {
      transform: none !important;
      filter: none !important;
    }
    .search-trigger::before,
    .search-trigger:not(.search-trigger--primary)::after,
    .search-trigger--drawer svg {
      opacity: 1 !important;
    }
  }

  @keyframes search-trigger-sheen {
    to {
      transform: translateX(140%) rotate(2deg);
      opacity: 0;
    }
  }
</style>
